// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFNodeNet.proto

#include "NFNodeNet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_NFNodeNet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ident_NFNodeNet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFNodeNet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInfoReport_NFNodeNet_2eproto;
namespace NFNetProto {
class IdentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ident> _instance;
} _Ident_default_instance_;
class ServerInfoReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfoReport> _instance;
} _ServerInfoReport_default_instance_;
class ServerInfoReportListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfoReportList> _instance;
} _ServerInfoReportList_default_instance_;
class ServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInfo> _instance;
} _ServerInfo_default_instance_;
class MsgBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgBase> _instance;
} _MsgBase_default_instance_;
class ServerHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerHeartBeat> _instance;
} _ServerHeartBeat_default_instance_;
class NodeToMasterPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeToMasterPacket> _instance;
} _NodeToMasterPacket_default_instance_;
class MasterToNodePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MasterToNodePacket> _instance;
} _MasterToNodePacket_default_instance_;
class GateToLoginPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GateToLoginPacket> _instance;
} _GateToLoginPacket_default_instance_;
class LoginToGatePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginToGatePacket> _instance;
} _LoginToGatePacket_default_instance_;
class GateToGamePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GateToGamePacket> _instance;
} _GateToGamePacket_default_instance_;
class GameToGatePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameToGatePacket> _instance;
} _GameToGatePacket_default_instance_;
class GateToChatPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GateToChatPacket> _instance;
} _GateToChatPacket_default_instance_;
class ChatToGatePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatToGatePacket> _instance;
} _ChatToGatePacket_default_instance_;
class WorldToGatePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldToGatePacket> _instance;
} _WorldToGatePacket_default_instance_;
class GateToWorldPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GateToWorldPacket> _instance;
} _GateToWorldPacket_default_instance_;
class GameToChatPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameToChatPacket> _instance;
} _GameToChatPacket_default_instance_;
class ChatToGamePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatToGamePacket> _instance;
} _ChatToGamePacket_default_instance_;
class GameToWorldPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameToWorldPacket> _instance;
} _GameToWorldPacket_default_instance_;
class WorldToGamePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldToGamePacket> _instance;
} _WorldToGamePacket_default_instance_;
class LoginToWorldPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginToWorldPacket> _instance;
} _LoginToWorldPacket_default_instance_;
class WorldToLoginPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldToLoginPacket> _instance;
} _WorldToLoginPacket_default_instance_;
class WorldToDBPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldToDBPacket> _instance;
} _WorldToDBPacket_default_instance_;
class DBToWorldPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBToWorldPacket> _instance;
} _DBToWorldPacket_default_instance_;
}  // namespace NFNetProto
static void InitDefaultsscc_info_ChatToGamePacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_ChatToGamePacket_default_instance_;
    new (ptr) ::NFNetProto::ChatToGamePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::ChatToGamePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatToGamePacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatToGamePacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_ChatToGatePacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_ChatToGatePacket_default_instance_;
    new (ptr) ::NFNetProto::ChatToGatePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::ChatToGatePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatToGatePacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatToGatePacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_DBToWorldPacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_DBToWorldPacket_default_instance_;
    new (ptr) ::NFNetProto::DBToWorldPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::DBToWorldPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBToWorldPacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBToWorldPacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GameToChatPacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_GameToChatPacket_default_instance_;
    new (ptr) ::NFNetProto::GameToChatPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::GameToChatPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameToChatPacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameToChatPacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GameToGatePacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_GameToGatePacket_default_instance_;
    new (ptr) ::NFNetProto::GameToGatePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::GameToGatePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameToGatePacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameToGatePacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GameToWorldPacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_GameToWorldPacket_default_instance_;
    new (ptr) ::NFNetProto::GameToWorldPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::GameToWorldPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameToWorldPacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameToWorldPacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GateToChatPacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_GateToChatPacket_default_instance_;
    new (ptr) ::NFNetProto::GateToChatPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::GateToChatPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GateToChatPacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GateToChatPacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GateToGamePacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_GateToGamePacket_default_instance_;
    new (ptr) ::NFNetProto::GateToGamePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::GateToGamePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GateToGamePacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GateToGamePacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GateToLoginPacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_GateToLoginPacket_default_instance_;
    new (ptr) ::NFNetProto::GateToLoginPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::GateToLoginPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GateToLoginPacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GateToLoginPacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_GateToWorldPacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_GateToWorldPacket_default_instance_;
    new (ptr) ::NFNetProto::GateToWorldPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::GateToWorldPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GateToWorldPacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GateToWorldPacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_Ident_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_Ident_default_instance_;
    new (ptr) ::NFNetProto::Ident();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::Ident::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ident_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ident_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_LoginToGatePacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_LoginToGatePacket_default_instance_;
    new (ptr) ::NFNetProto::LoginToGatePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::LoginToGatePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginToGatePacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginToGatePacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_LoginToWorldPacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_LoginToWorldPacket_default_instance_;
    new (ptr) ::NFNetProto::LoginToWorldPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::LoginToWorldPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginToWorldPacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginToWorldPacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_MasterToNodePacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_MasterToNodePacket_default_instance_;
    new (ptr) ::NFNetProto::MasterToNodePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::MasterToNodePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MasterToNodePacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MasterToNodePacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_MsgBase_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_MsgBase_default_instance_;
    new (ptr) ::NFNetProto::MsgBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::MsgBase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgBase_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgBase_NFNodeNet_2eproto}, {
      &scc_info_Ident_NFNodeNet_2eproto.base,}};

static void InitDefaultsscc_info_NodeToMasterPacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_NodeToMasterPacket_default_instance_;
    new (ptr) ::NFNetProto::NodeToMasterPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::NodeToMasterPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeToMasterPacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeToMasterPacket_NFNodeNet_2eproto}, {
      &scc_info_ServerInfoReport_NFNodeNet_2eproto.base,}};

static void InitDefaultsscc_info_ServerHeartBeat_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_ServerHeartBeat_default_instance_;
    new (ptr) ::NFNetProto::ServerHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::ServerHeartBeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerHeartBeat_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerHeartBeat_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_ServerInfo_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_ServerInfo_default_instance_;
    new (ptr) ::NFNetProto::ServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::ServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInfo_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerInfo_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_ServerInfoReport_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_ServerInfoReport_default_instance_;
    new (ptr) ::NFNetProto::ServerInfoReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::ServerInfoReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInfoReport_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerInfoReport_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_ServerInfoReportList_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_ServerInfoReportList_default_instance_;
    new (ptr) ::NFNetProto::ServerInfoReportList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::ServerInfoReportList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerInfoReportList_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerInfoReportList_NFNodeNet_2eproto}, {
      &scc_info_ServerInfoReport_NFNodeNet_2eproto.base,}};

static void InitDefaultsscc_info_WorldToDBPacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_WorldToDBPacket_default_instance_;
    new (ptr) ::NFNetProto::WorldToDBPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::WorldToDBPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldToDBPacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorldToDBPacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_WorldToGamePacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_WorldToGamePacket_default_instance_;
    new (ptr) ::NFNetProto::WorldToGamePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::WorldToGamePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldToGamePacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorldToGamePacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_WorldToGatePacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_WorldToGatePacket_default_instance_;
    new (ptr) ::NFNetProto::WorldToGatePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::WorldToGatePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldToGatePacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorldToGatePacket_NFNodeNet_2eproto}, {}};

static void InitDefaultsscc_info_WorldToLoginPacket_NFNodeNet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFNetProto::_WorldToLoginPacket_default_instance_;
    new (ptr) ::NFNetProto::WorldToLoginPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFNetProto::WorldToLoginPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorldToLoginPacket_NFNodeNet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorldToLoginPacket_NFNodeNet_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NFNodeNet_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_NFNodeNet_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NFNodeNet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NFNodeNet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::Ident, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::Ident, svrid_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::Ident, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfoReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfoReport, server_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfoReport, server_name_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfoReport, server_ip_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfoReport, server_port_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfoReport, server_max_online_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfoReport, server_cur_count_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfoReport, server_state_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfoReport, server_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfoReportList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfoReportList, server_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfo, server_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfo, wait_count_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerInfo, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::MsgBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::MsgBase, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::MsgBase, msg_data_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::MsgBase, player_client_list_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::MsgBase, hash_ident_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ServerHeartBeat, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::NodeToMasterPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::NodeToMasterPacket, server_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::MasterToNodePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::MasterToNodePacket, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToLoginPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToLoginPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToLoginPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::LoginToGatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::LoginToGatePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::LoginToGatePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::LoginToGatePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToGamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToGamePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToGamePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToGamePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToGatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToGatePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToGatePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToGatePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToChatPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToChatPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToChatPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToChatPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ChatToGatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ChatToGatePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ChatToGatePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ChatToGatePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToGatePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToGatePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToGatePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToGatePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToWorldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToWorldPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToWorldPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GateToWorldPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToChatPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToChatPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToChatPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToChatPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ChatToGamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ChatToGamePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ChatToGamePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::ChatToGamePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToWorldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToWorldPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToWorldPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::GameToWorldPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToGamePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToGamePacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToGamePacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToGamePacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::LoginToWorldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::LoginToWorldPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::LoginToWorldPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::LoginToWorldPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToLoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToLoginPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToLoginPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToLoginPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToDBPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToDBPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToDBPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::WorldToDBPacket, msg_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::DBToWorldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFNetProto::DBToWorldPacket, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::DBToWorldPacket, msg_id_),
  PROTOBUF_FIELD_OFFSET(::NFNetProto::DBToWorldPacket, msg_body_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFNetProto::Ident)},
  { 7, -1, sizeof(::NFNetProto::ServerInfoReport)},
  { 20, -1, sizeof(::NFNetProto::ServerInfoReportList)},
  { 26, -1, sizeof(::NFNetProto::ServerInfo)},
  { 35, -1, sizeof(::NFNetProto::MsgBase)},
  { 44, -1, sizeof(::NFNetProto::ServerHeartBeat)},
  { 50, -1, sizeof(::NFNetProto::NodeToMasterPacket)},
  { 56, -1, sizeof(::NFNetProto::MasterToNodePacket)},
  { 62, -1, sizeof(::NFNetProto::GateToLoginPacket)},
  { 70, -1, sizeof(::NFNetProto::LoginToGatePacket)},
  { 78, -1, sizeof(::NFNetProto::GateToGamePacket)},
  { 86, -1, sizeof(::NFNetProto::GameToGatePacket)},
  { 94, -1, sizeof(::NFNetProto::GateToChatPacket)},
  { 102, -1, sizeof(::NFNetProto::ChatToGatePacket)},
  { 110, -1, sizeof(::NFNetProto::WorldToGatePacket)},
  { 118, -1, sizeof(::NFNetProto::GateToWorldPacket)},
  { 126, -1, sizeof(::NFNetProto::GameToChatPacket)},
  { 134, -1, sizeof(::NFNetProto::ChatToGamePacket)},
  { 142, -1, sizeof(::NFNetProto::GameToWorldPacket)},
  { 150, -1, sizeof(::NFNetProto::WorldToGamePacket)},
  { 158, -1, sizeof(::NFNetProto::LoginToWorldPacket)},
  { 166, -1, sizeof(::NFNetProto::WorldToLoginPacket)},
  { 174, -1, sizeof(::NFNetProto::WorldToDBPacket)},
  { 182, -1, sizeof(::NFNetProto::DBToWorldPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_Ident_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_ServerInfoReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_ServerInfoReportList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_MsgBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_ServerHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_NodeToMasterPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_MasterToNodePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_GateToLoginPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_LoginToGatePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_GateToGamePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_GameToGatePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_GateToChatPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_ChatToGatePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_WorldToGatePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_GateToWorldPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_GameToChatPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_ChatToGamePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_GameToWorldPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_WorldToGamePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_LoginToWorldPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_WorldToLoginPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_WorldToDBPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFNetProto::_DBToWorldPacket_default_instance_),
};

const char descriptor_table_protodef_NFNodeNet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017NFNodeNet.proto\022\nNFNetProto\032\022ServerPub"
  "lic.proto\"%\n\005Ident\022\r\n\005svrid\030\001 \001(\003\022\r\n\005ind"
  "ex\030\002 \001(\003\"\334\001\n\020ServerInfoReport\022\021\n\tserver_"
  "id\030\001 \001(\005\022\023\n\013server_name\030\002 \001(\014\022\021\n\tserver_"
  "ip\030\003 \001(\014\022\023\n\013server_port\030\004 \001(\005\022\031\n\021server_"
  "max_online\030\005 \001(\005\022\030\n\020server_cur_count\030\006 \001"
  "(\005\022.\n\014server_state\030\007 \001(\0162\030.NFNetProto.ES"
  "erverState\022\023\n\013server_type\030\010 \001(\005\"I\n\024Serve"
  "rInfoReportList\0221\n\013server_list\030\001 \003(\0132\034.N"
  "FNetProto.ServerInfoReport\"k\n\nServerInfo"
  "\022\021\n\tserver_id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\022\022\n\nwai"
  "t_count\030\003 \001(\005\022(\n\006status\030\004 \001(\0162\030.NFNetPro"
  "to.EServerState\"\227\001\n\007MsgBase\022$\n\tplayer_id"
  "\030\001 \001(\0132\021.NFNetProto.Ident\022\020\n\010msg_data\030\002 "
  "\001(\014\022-\n\022player_Client_list\030\003 \003(\0132\021.NFNetP"
  "roto.Ident\022%\n\nhash_ident\030\004 \001(\0132\021.NFNetPr"
  "oto.Ident\" \n\017ServerHeartBeat\022\r\n\005count\030\001 "
  "\001(\005\"G\n\022NodeToMasterPacket\0221\n\013server_info"
  "\030\001 \001(\0132\034.NFNetProto.ServerInfoReport\";\n\022"
  "MasterToNodePacket\022%\n\006result\030\001 \001(\0162\025.NFN"
  "etProto.RegResult\"H\n\021GateToLoginPacket\022\021"
  "\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\r\022\020\n\010msg"
  "_body\030\003 \001(\014\"H\n\021LoginToGatePacket\022\021\n\tplay"
  "er_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\r\022\020\n\010msg_body\030"
  "\003 \001(\014\"G\n\020GateToGamePacket\022\021\n\tplayer_id\030\001"
  " \001(\004\022\016\n\006msg_id\030\002 \001(\r\022\020\n\010msg_body\030\003 \001(\014\"G"
  "\n\020GameToGatePacket\022\021\n\tplayer_id\030\001 \001(\004\022\016\n"
  "\006msg_id\030\002 \001(\r\022\020\n\010msg_body\030\003 \001(\014\"G\n\020GateT"
  "oChatPacket\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_id"
  "\030\002 \001(\r\022\020\n\010msg_body\030\003 \001(\014\"G\n\020ChatToGatePa"
  "cket\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\r\022"
  "\020\n\010msg_body\030\003 \001(\014\"H\n\021WorldToGatePacket\022\021"
  "\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\r\022\020\n\010msg"
  "_body\030\003 \001(\014\"H\n\021GateToWorldPacket\022\021\n\tplay"
  "er_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\r\022\020\n\010msg_body\030"
  "\003 \001(\014\"G\n\020GameToChatPacket\022\021\n\tplayer_id\030\001"
  " \001(\004\022\016\n\006msg_id\030\002 \001(\r\022\020\n\010msg_body\030\003 \001(\014\"G"
  "\n\020ChatToGamePacket\022\021\n\tplayer_id\030\001 \001(\004\022\016\n"
  "\006msg_id\030\002 \001(\r\022\020\n\010msg_body\030\003 \001(\014\"H\n\021GameT"
  "oWorldPacket\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_i"
  "d\030\002 \001(\r\022\020\n\010msg_body\030\003 \001(\014\"H\n\021WorldToGame"
  "Packet\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001("
  "\r\022\020\n\010msg_body\030\003 \001(\014\"I\n\022LoginToWorldPacke"
  "t\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\r\022\020\n\010"
  "msg_body\030\003 \001(\014\"I\n\022WorldToLoginPacket\022\021\n\t"
  "player_id\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\r\022\020\n\010msg_b"
  "ody\030\003 \001(\014\"F\n\017WorldToDBPacket\022\021\n\tplayer_i"
  "d\030\001 \001(\004\022\016\n\006msg_id\030\002 \001(\r\022\020\n\010msg_body\030\003 \001("
  "\014\"F\n\017DBToWorldPacket\022\021\n\tplayer_id\030\001 \001(\004\022"
  "\016\n\006msg_id\030\002 \001(\r\022\020\n\010msg_body\030\003 \001(\014*Z\n\014ESe"
  "rverState\022\r\n\tEST_CRASH\020\000\022\016\n\nEST_NORMAL\020\001"
  "\022\014\n\010EST_BUSY\020\002\022\014\n\010EST_FIRE\020\003\022\017\n\013EST_MAIN"
  "TEN\020\004*\336\004\n\017ServerNodeMsgID\022\026\n\022SERVER_NODE"
  "_MSG_ID\020\000\022\030\n\023GATE_ROUTE_TO_LOGIN\020\221N\022\030\n\023L"
  "OGIN_ROUTE_TO_GATE\020\222N\022\027\n\022GATE_ROUTE_TO_G"
  "AME\020\223N\022\027\n\022GAME_ROUTE_TO_GATE\020\224N\022\027\n\022GATE_"
  "ROUTE_TO_CHAT\020\225N\022\027\n\022CHAT_ROUTE_TO_GATE\020\226"
  "N\022\030\n\023WORLD_ROUTE_TO_GATE\020\227N\022\030\n\023GATE_ROUT"
  "E_TO_WORLD\020\230N\022\027\n\022GAME_ROUTE_TO_CHAT\020\231N\022\027"
  "\n\022CHAT_ROUTE_TO_GAME\020\232N\022\030\n\023GAME_ROUTE_TO"
  "_WORLD\020\233N\022\030\n\023WORLD_ROUTE_TO_GAME\020\234N\022\031\n\024L"
  "OGIN_ROUTE_TO_WORLD\020\235N\022\031\n\024WORLD_ROUTE_TO"
  "_LOGIN\020\236N\022\026\n\021WORLD_ROUTE_TO_DB\020\237N\022\026\n\021DB_"
  "ROUTE_TO_WORLD\020\240N\022\031\n\024PLAYER_ROUTE_TO_GAT"
  "E\020\241N\022\031\n\024GATE_ROUTE_TO_PLAYER\020\242N\022\030\n\023GAME_"
  "PLAYER_OFFLINE\020\303N\022!\n\034REPORT_CLIENT_INFO_"
  "TO_SERVER\020\306N\022(\n#MASTER_REPORT_SERVER_INF"
  "O_TO_SERVER\020\305N*\232\002\n\013EServerType\022\024\n\020SERVER"
  "_TYPE_NONE\020\000\022\026\n\022SERVER_TYPE_MASTER\020\001\022\024\n\020"
  "SERVER_TYPE_GAME\020\002\022\025\n\021SERVER_TYPE_LOGIN\020"
  "\003\022\025\n\021SERVER_TYPE_WORLD\020\004\022\024\n\020SERVER_TYPE_"
  "GATE\020\005\022\024\n\020SERVER_TYPE_CHAT\020\006\022\022\n\016SERVER_T"
  "YPE_DB\020\007\022\025\n\021SERVER_TYPE_MYSQL\020\010\022\025\n\021SERVE"
  "R_TYPE_REDIS\020\t\022\026\n\022SERVER_TYPE_PLAYER\020\n\022\023"
  "\n\017SERVER_TYPE_MAX\020\013*(\n\tRegResult\022\r\n\tE_SU"
  "CCESS\020\000\022\014\n\010E_FAILED\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NFNodeNet_2eproto_deps[1] = {
  &::descriptor_table_ServerPublic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NFNodeNet_2eproto_sccs[24] = {
  &scc_info_ChatToGamePacket_NFNodeNet_2eproto.base,
  &scc_info_ChatToGatePacket_NFNodeNet_2eproto.base,
  &scc_info_DBToWorldPacket_NFNodeNet_2eproto.base,
  &scc_info_GameToChatPacket_NFNodeNet_2eproto.base,
  &scc_info_GameToGatePacket_NFNodeNet_2eproto.base,
  &scc_info_GameToWorldPacket_NFNodeNet_2eproto.base,
  &scc_info_GateToChatPacket_NFNodeNet_2eproto.base,
  &scc_info_GateToGamePacket_NFNodeNet_2eproto.base,
  &scc_info_GateToLoginPacket_NFNodeNet_2eproto.base,
  &scc_info_GateToWorldPacket_NFNodeNet_2eproto.base,
  &scc_info_Ident_NFNodeNet_2eproto.base,
  &scc_info_LoginToGatePacket_NFNodeNet_2eproto.base,
  &scc_info_LoginToWorldPacket_NFNodeNet_2eproto.base,
  &scc_info_MasterToNodePacket_NFNodeNet_2eproto.base,
  &scc_info_MsgBase_NFNodeNet_2eproto.base,
  &scc_info_NodeToMasterPacket_NFNodeNet_2eproto.base,
  &scc_info_ServerHeartBeat_NFNodeNet_2eproto.base,
  &scc_info_ServerInfo_NFNodeNet_2eproto.base,
  &scc_info_ServerInfoReport_NFNodeNet_2eproto.base,
  &scc_info_ServerInfoReportList_NFNodeNet_2eproto.base,
  &scc_info_WorldToDBPacket_NFNodeNet_2eproto.base,
  &scc_info_WorldToGamePacket_NFNodeNet_2eproto.base,
  &scc_info_WorldToGatePacket_NFNodeNet_2eproto.base,
  &scc_info_WorldToLoginPacket_NFNodeNet_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NFNodeNet_2eproto_once;
static bool descriptor_table_NFNodeNet_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFNodeNet_2eproto = {
  &descriptor_table_NFNodeNet_2eproto_initialized, descriptor_table_protodef_NFNodeNet_2eproto, "NFNodeNet.proto", 3029,
  &descriptor_table_NFNodeNet_2eproto_once, descriptor_table_NFNodeNet_2eproto_sccs, descriptor_table_NFNodeNet_2eproto_deps, 24, 1,
  schemas, file_default_instances, TableStruct_NFNodeNet_2eproto::offsets,
  file_level_metadata_NFNodeNet_2eproto, 24, file_level_enum_descriptors_NFNodeNet_2eproto, file_level_service_descriptors_NFNodeNet_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NFNodeNet_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NFNodeNet_2eproto), true);
namespace NFNetProto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFNodeNet_2eproto);
  return file_level_enum_descriptors_NFNodeNet_2eproto[0];
}
bool EServerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerNodeMsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFNodeNet_2eproto);
  return file_level_enum_descriptors_NFNodeNet_2eproto[1];
}
bool ServerNodeMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
    case 10017:
    case 10018:
    case 10051:
    case 10053:
    case 10054:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFNodeNet_2eproto);
  return file_level_enum_descriptors_NFNodeNet_2eproto[2];
}
bool EServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFNodeNet_2eproto);
  return file_level_enum_descriptors_NFNodeNet_2eproto[3];
}
bool RegResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Ident::InitAsDefaultInstance() {
}
class Ident::_Internal {
 public:
};

Ident::Ident()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFNetProto.Ident)
}
Ident::Ident(const Ident& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:NFNetProto.Ident)
}

void Ident::SharedCtor() {
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
}

Ident::~Ident() {
  // @@protoc_insertion_point(destructor:NFNetProto.Ident)
  SharedDtor();
}

void Ident::SharedDtor() {
}

void Ident::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ident& Ident::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ident_NFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void Ident::Clear() {
// @@protoc_insertion_point(message_clear_start:NFNetProto.Ident)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

const char* Ident::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 svrid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ident::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFNetProto.Ident)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 svrid = 1;
  if (this->svrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_svrid(), target);
  }

  // int64 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFNetProto.Ident)
  return target;
}

size_t Ident::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFNetProto.Ident)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 svrid = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_svrid());
  }

  // int64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ident::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  const Ident* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ident>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.Ident)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.Ident)
    MergeFrom(*source);
  }
}

void Ident::MergeFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void Ident::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ident::CopyFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ident::IsInitialized() const {
  return true;
}

void Ident::InternalSwap(Ident* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(svrid_, other->svrid_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ident::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerInfoReport::InitAsDefaultInstance() {
}
class ServerInfoReport::_Internal {
 public:
};

ServerInfoReport::ServerInfoReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFNetProto.ServerInfoReport)
}
ServerInfoReport::ServerInfoReport(const ServerInfoReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_name().empty()) {
    server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_ip().empty()) {
    server_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_type_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  // @@protoc_insertion_point(copy_constructor:NFNetProto.ServerInfoReport)
}

void ServerInfoReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerInfoReport_NFNodeNet_2eproto.base);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
}

ServerInfoReport::~ServerInfoReport() {
  // @@protoc_insertion_point(destructor:NFNetProto.ServerInfoReport)
  SharedDtor();
}

void ServerInfoReport::SharedDtor() {
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerInfoReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerInfoReport& ServerInfoReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerInfoReport_NFNodeNet_2eproto.base);
  return *internal_default_instance();
}


void ServerInfoReport::Clear() {
// @@protoc_insertion_point(message_clear_start:NFNetProto.ServerInfoReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_type_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(server_type_));
  _internal_metadata_.Clear();
}

const char* ServerInfoReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
			server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
			CHK_(ptr);
		}
		else goto handle_unusual;
		continue;
		// bytes server_name = 2;
	  case 2:
		  if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
			  ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_server_name(), ptr, ctx);
			  CHK_(ptr);
		  }
		  else goto handle_unusual;
		  continue;
		  // bytes server_ip = 3;
	  case 3:
		  if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
			  ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_server_ip(), ptr, ctx);
			  CHK_(ptr);
		  }
		  else goto handle_unusual;
		  continue;
		  // int32 server_port = 4;
	  case 4:
		  if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
			  server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
			  CHK_(ptr);
		  }
		  else goto handle_unusual;
		  continue;
		  // int32 server_max_online = 5;
	  case 5:
		  if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
			  server_max_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
			  CHK_(ptr);
		  }
		  else goto handle_unusual;
		  continue;
		  // int32 server_cur_count = 6;
	  case 6:
		  if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
			  server_cur_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
			  CHK_(ptr);
		  }
		  else goto handle_unusual;
		  continue;
		  // .NFNetProto.EServerState server_state = 7;
	  case 7:
		  if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
			  ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
			  CHK_(ptr);
			  _internal_set_server_state(static_cast<::NFNetProto::EServerState>(val));
		  }
		  else goto handle_unusual;
		  continue;
		  // int32 server_type = 8;
	  case 8:
		  if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
			  server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
			  CHK_(ptr);
		  }
		  else goto handle_unusual;
		  continue;
	  default: {
	  handle_unusual:
		  if ((tag & 7) == 4 || tag == 0) {
			  ctx->SetLastTag(tag);
			  goto success;
		  }
		  ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
		  CHK_(ptr != nullptr);
		  continue;
	  }
	}  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfoReport::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.ServerInfoReport)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int32 server_id = 1;
	if (this->server_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
	}

	// bytes server_name = 2;
	if (this->server_name().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			2, this->_internal_server_name(), target);
	}

	// bytes server_ip = 3;
	if (this->server_ip().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_server_ip(), target);
	}

	// int32 server_port = 4;
	if (this->server_port() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_server_port(), target);
	}

	// int32 server_max_online = 5;
	if (this->server_max_online() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_server_max_online(), target);
	}

	// int32 server_cur_count = 6;
	if (this->server_cur_count() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_server_cur_count(), target);
	}

	// .NFNetProto.EServerState server_state = 7;
	if (this->server_state() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
			7, this->_internal_server_state(), target);
	}

	// int32 server_type = 8;
	if (this->server_type() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_server_type(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.ServerInfoReport)
	return target;
}

size_t ServerInfoReport::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.ServerInfoReport)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes server_name = 2;
	if (this->server_name().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_server_name());
	}

	// bytes server_ip = 3;
	if (this->server_ip().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_server_ip());
	}

	// int32 server_id = 1;
	if (this->server_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
				this->_internal_server_id());
	}

	// int32 server_port = 4;
	if (this->server_port() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
				this->_internal_server_port());
	}

	// int32 server_max_online = 5;
	if (this->server_max_online() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
				this->_internal_server_max_online());
	}

	// int32 server_cur_count = 6;
	if (this->server_cur_count() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
				this->_internal_server_cur_count());
	}

	// .NFNetProto.EServerState server_state = 7;
	if (this->server_state() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_server_state());
	}

	// int32 server_type = 8;
	if (this->server_type() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
				this->_internal_server_type());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void ServerInfoReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.ServerInfoReport)
	GOOGLE_DCHECK_NE(&from, this);
	const ServerInfoReport* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfoReport>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.ServerInfoReport)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.ServerInfoReport)
		MergeFrom(*source);
	}
}

void ServerInfoReport::MergeFrom(const ServerInfoReport& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.ServerInfoReport)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.server_name().size() > 0) {

		server_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_name_);
	}
	if (from.server_ip().size() > 0) {

		server_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
	}
	if (from.server_id() != 0) {
		_internal_set_server_id(from._internal_server_id());
	}
	if (from.server_port() != 0) {
		_internal_set_server_port(from._internal_server_port());
	}
	if (from.server_max_online() != 0) {
		_internal_set_server_max_online(from._internal_server_max_online());
	}
	if (from.server_cur_count() != 0) {
		_internal_set_server_cur_count(from._internal_server_cur_count());
	}
	if (from.server_state() != 0) {
		_internal_set_server_state(from._internal_server_state());
	}
	if (from.server_type() != 0) {
		_internal_set_server_type(from._internal_server_type());
	}
}

void ServerInfoReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.ServerInfoReport)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void ServerInfoReport::CopyFrom(const ServerInfoReport& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.ServerInfoReport)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool ServerInfoReport::IsInitialized() const {
	return true;
}

void ServerInfoReport::InternalSwap(ServerInfoReport* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	server_ip_.Swap(&other->server_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(server_id_, other->server_id_);
	swap(server_port_, other->server_port_);
	swap(server_max_online_, other->server_max_online_);
	swap(server_cur_count_, other->server_cur_count_);
	swap(server_state_, other->server_state_);
	swap(server_type_, other->server_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfoReport::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void ServerInfoReportList::InitAsDefaultInstance() {
}
class ServerInfoReportList::_Internal {
public:
};

ServerInfoReportList::ServerInfoReportList()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.ServerInfoReportList)
}
ServerInfoReportList::ServerInfoReportList(const ServerInfoReportList& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr),
	server_list_(from.server_list_) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:NFNetProto.ServerInfoReportList)
}

void ServerInfoReportList::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerInfoReportList_NFNodeNet_2eproto.base);
}

ServerInfoReportList::~ServerInfoReportList() {
	// @@protoc_insertion_point(destructor:NFNetProto.ServerInfoReportList)
	SharedDtor();
}

void ServerInfoReportList::SharedDtor() {
}

void ServerInfoReportList::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const ServerInfoReportList& ServerInfoReportList::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerInfoReportList_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void ServerInfoReportList::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.ServerInfoReportList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	server_list_.Clear();
	_internal_metadata_.Clear();
}

const char* ServerInfoReportList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .NFNetProto.ServerInfoReport server_list = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
				ptr -= 1;
				do {
					ptr += 1;
					ptr = ctx->ParseMessage(_internal_add_server_list(), ptr);
					CHK_(ptr);
					if (!ctx->DataAvailable(ptr)) break;
				} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfoReportList::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.ServerInfoReportList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .NFNetProto.ServerInfoReport server_list = 1;
	for (unsigned int i = 0,
		n = static_cast<unsigned int>(this->_internal_server_list_size()); i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
			InternalWriteMessageToArray(1, this->_internal_server_list(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.ServerInfoReportList)
	return target;
}

size_t ServerInfoReportList::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.ServerInfoReportList)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .NFNetProto.ServerInfoReport server_list = 1;
	total_size += 1UL * this->_internal_server_list_size();
	for (const auto& msg : this->server_list_) {
		total_size +=
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void ServerInfoReportList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.ServerInfoReportList)
	GOOGLE_DCHECK_NE(&from, this);
	const ServerInfoReportList* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfoReportList>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.ServerInfoReportList)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.ServerInfoReportList)
		MergeFrom(*source);
	}
}

void ServerInfoReportList::MergeFrom(const ServerInfoReportList& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.ServerInfoReportList)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	server_list_.MergeFrom(from.server_list_);
}

void ServerInfoReportList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.ServerInfoReportList)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void ServerInfoReportList::CopyFrom(const ServerInfoReportList& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.ServerInfoReportList)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool ServerInfoReportList::IsInitialized() const {
	return true;
}

void ServerInfoReportList::InternalSwap(ServerInfoReportList* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	server_list_.InternalSwap(&other->server_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfoReportList::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void ServerInfo::InitAsDefaultInstance() {
}
class ServerInfo::_Internal {
public:
};

ServerInfo::ServerInfo()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_name().empty()) {
		name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
	}
	::memcpy(&server_id_, &from.server_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&status_) -
			reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.ServerInfo)
}

void ServerInfo::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerInfo_NFNodeNet_2eproto.base);
	name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&server_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&status_) -
		reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
}

ServerInfo::~ServerInfo() {
	// @@protoc_insertion_point(destructor:NFNetProto.ServerInfo)
	SharedDtor();
}

void ServerInfo::SharedDtor() {
	name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const ServerInfo& ServerInfo::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerInfo_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void ServerInfo::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.ServerInfo)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&server_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&status_) -
		reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
	_internal_metadata_.Clear();
}

const char* ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// int32 server_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes name = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// int32 wait_count = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
				wait_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// .NFNetProto.EServerState status = 4;
		case 4:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
				::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
				_internal_set_status(static_cast<::NFNetProto::EServerState>(val));
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.ServerInfo)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int32 server_id = 1;
	if (this->server_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
	}

	// bytes name = 2;
	if (this->name().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			2, this->_internal_name(), target);
	}

	// int32 wait_count = 3;
	if (this->wait_count() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_wait_count(), target);
	}

	// .NFNetProto.EServerState status = 4;
	if (this->status() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
			4, this->_internal_status(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.ServerInfo)
	return target;
}

size_t ServerInfo::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.ServerInfo)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes name = 2;
	if (this->name().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_name());
	}

	// int32 server_id = 1;
	if (this->server_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
				this->_internal_server_id());
	}

	// int32 wait_count = 3;
	if (this->wait_count() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
				this->_internal_wait_count());
	}

	// .NFNetProto.EServerState status = 4;
	if (this->status() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.ServerInfo)
	GOOGLE_DCHECK_NE(&from, this);
	const ServerInfo* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInfo>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.ServerInfo)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.ServerInfo)
		MergeFrom(*source);
	}
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.ServerInfo)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.name().size() > 0) {

		name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
	}
	if (from.server_id() != 0) {
		_internal_set_server_id(from._internal_server_id());
	}
	if (from.wait_count() != 0) {
		_internal_set_wait_count(from._internal_wait_count());
	}
	if (from.status() != 0) {
		_internal_set_status(from._internal_status());
	}
}

void ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.ServerInfo)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.ServerInfo)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
	return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(server_id_, other->server_id_);
	swap(wait_count_, other->wait_count_);
	swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void MsgBase::InitAsDefaultInstance() {
	::NFNetProto::_MsgBase_default_instance_._instance.get_mutable()->player_id_ = const_cast<::NFNetProto::Ident*>(
		::NFNetProto::Ident::internal_default_instance());
	::NFNetProto::_MsgBase_default_instance_._instance.get_mutable()->hash_ident_ = const_cast<::NFNetProto::Ident*>(
		::NFNetProto::Ident::internal_default_instance());
}
class MsgBase::_Internal {
public:
	static const ::NFNetProto::Ident& player_id(const MsgBase* msg);
	static const ::NFNetProto::Ident& hash_ident(const MsgBase* msg);
};

const ::NFNetProto::Ident&
MsgBase::_Internal::player_id(const MsgBase* msg) {
	return *msg->player_id_;
}
const ::NFNetProto::Ident&
MsgBase::_Internal::hash_ident(const MsgBase* msg) {
	return *msg->hash_ident_;
}
MsgBase::MsgBase()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.MsgBase)
}
MsgBase::MsgBase(const MsgBase& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr),
	player_client_list_(from.player_client_list_) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_data().empty()) {
		msg_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
	}
	if (from._internal_has_player_id()) {
		player_id_ = new ::NFNetProto::Ident(*from.player_id_);
	}
	else {
		player_id_ = nullptr;
	}
	if (from._internal_has_hash_ident()) {
		hash_ident_ = new ::NFNetProto::Ident(*from.hash_ident_);
	}
	else {
		hash_ident_ = nullptr;
	}
	// @@protoc_insertion_point(copy_constructor:NFNetProto.MsgBase)
}

void MsgBase::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgBase_NFNodeNet_2eproto.base);
	msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&hash_ident_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(hash_ident_));
}

MsgBase::~MsgBase() {
	// @@protoc_insertion_point(destructor:NFNetProto.MsgBase)
	SharedDtor();
}

void MsgBase::SharedDtor() {
	msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (this != internal_default_instance()) delete player_id_;
	if (this != internal_default_instance()) delete hash_ident_;
}

void MsgBase::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const MsgBase& MsgBase::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgBase_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void MsgBase::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.MsgBase)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	player_client_list_.Clear();
	msg_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
		delete player_id_;
	}
	player_id_ = nullptr;
	if (GetArenaNoVirtual() == nullptr && hash_ident_ != nullptr) {
		delete hash_ident_;
	}
	hash_ident_ = nullptr;
	_internal_metadata_.Clear();
}

const char* MsgBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .NFNetProto.Ident player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
				ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_data = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_data(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// repeated .NFNetProto.Ident player_Client_list = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr -= 1;
				do {
					ptr += 1;
					ptr = ctx->ParseMessage(_internal_add_player_client_list(), ptr);
					CHK_(ptr);
					if (!ctx->DataAvailable(ptr)) break;
				} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
			}
			else goto handle_unusual;
			continue;
			// .NFNetProto.Ident hash_ident = 4;
		case 4:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
				ptr = ctx->ParseMessage(_internal_mutable_hash_ident(), ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBase::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.MsgBase)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .NFNetProto.Ident player_id = 1;
	if (this->has_player_id()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
			InternalWriteMessageToArray(
				1, _Internal::player_id(this), target, stream);
	}

	// bytes msg_data = 2;
	if (this->msg_data().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			2, this->_internal_msg_data(), target);
	}

	// repeated .NFNetProto.Ident player_Client_list = 3;
	for (unsigned int i = 0,
		n = static_cast<unsigned int>(this->_internal_player_client_list_size()); i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
			InternalWriteMessageToArray(3, this->_internal_player_client_list(i), target, stream);
	}

	// .NFNetProto.Ident hash_ident = 4;
	if (this->has_hash_ident()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
			InternalWriteMessageToArray(
				4, _Internal::hash_ident(this), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.MsgBase)
	return target;
}

size_t MsgBase::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.MsgBase)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .NFNetProto.Ident player_Client_list = 3;
	total_size += 1UL * this->_internal_player_client_list_size();
	for (const auto& msg : this->player_client_list_) {
		total_size +=
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// bytes msg_data = 2;
	if (this->msg_data().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_data());
	}

	// .NFNetProto.Ident player_id = 1;
	if (this->has_player_id()) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
				*player_id_);
	}

	// .NFNetProto.Ident hash_ident = 4;
	if (this->has_hash_ident()) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
				*hash_ident_);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void MsgBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.MsgBase)
	GOOGLE_DCHECK_NE(&from, this);
	const MsgBase* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBase>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.MsgBase)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.MsgBase)
		MergeFrom(*source);
	}
}

void MsgBase::MergeFrom(const MsgBase& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.MsgBase)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	player_client_list_.MergeFrom(from.player_client_list_);
	if (from.msg_data().size() > 0) {

		msg_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
	}
	if (from.has_player_id()) {
		_internal_mutable_player_id()->::NFNetProto::Ident::MergeFrom(from._internal_player_id());
	}
	if (from.has_hash_ident()) {
		_internal_mutable_hash_ident()->::NFNetProto::Ident::MergeFrom(from._internal_hash_ident());
	}
}

void MsgBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.MsgBase)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void MsgBase::CopyFrom(const MsgBase& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.MsgBase)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool MsgBase::IsInitialized() const {
	return true;
}

void MsgBase::InternalSwap(MsgBase* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	player_client_list_.InternalSwap(&other->player_client_list_);
	msg_data_.Swap(&other->msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(hash_ident_, other->hash_ident_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBase::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void ServerHeartBeat::InitAsDefaultInstance() {
}
class ServerHeartBeat::_Internal {
public:
};

ServerHeartBeat::ServerHeartBeat()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.ServerHeartBeat)
}
ServerHeartBeat::ServerHeartBeat(const ServerHeartBeat& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	count_ = from.count_;
	// @@protoc_insertion_point(copy_constructor:NFNetProto.ServerHeartBeat)
}

void ServerHeartBeat::SharedCtor() {
	count_ = 0;
}

ServerHeartBeat::~ServerHeartBeat() {
	// @@protoc_insertion_point(destructor:NFNetProto.ServerHeartBeat)
	SharedDtor();
}

void ServerHeartBeat::SharedDtor() {
}

void ServerHeartBeat::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const ServerHeartBeat& ServerHeartBeat::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerHeartBeat_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void ServerHeartBeat::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.ServerHeartBeat)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	count_ = 0;
	_internal_metadata_.Clear();
}

const char* ServerHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// int32 count = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerHeartBeat::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.ServerHeartBeat)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int32 count = 1;
	if (this->count() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.ServerHeartBeat)
	return target;
}

size_t ServerHeartBeat::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.ServerHeartBeat)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// int32 count = 1;
	if (this->count() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
				this->_internal_count());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void ServerHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.ServerHeartBeat)
	GOOGLE_DCHECK_NE(&from, this);
	const ServerHeartBeat* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerHeartBeat>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.ServerHeartBeat)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.ServerHeartBeat)
		MergeFrom(*source);
	}
}

void ServerHeartBeat::MergeFrom(const ServerHeartBeat& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.ServerHeartBeat)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.count() != 0) {
		_internal_set_count(from._internal_count());
	}
}

void ServerHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.ServerHeartBeat)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void ServerHeartBeat::CopyFrom(const ServerHeartBeat& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.ServerHeartBeat)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool ServerHeartBeat::IsInitialized() const {
	return true;
}

void ServerHeartBeat::InternalSwap(ServerHeartBeat* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerHeartBeat::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void NodeToMasterPacket::InitAsDefaultInstance() {
	::NFNetProto::_NodeToMasterPacket_default_instance_._instance.get_mutable()->server_info_ = const_cast<::NFNetProto::ServerInfoReport*>(
		::NFNetProto::ServerInfoReport::internal_default_instance());
}
class NodeToMasterPacket::_Internal {
public:
	static const ::NFNetProto::ServerInfoReport& server_info(const NodeToMasterPacket* msg);
};

const ::NFNetProto::ServerInfoReport&
NodeToMasterPacket::_Internal::server_info(const NodeToMasterPacket* msg) {
	return *msg->server_info_;
}
NodeToMasterPacket::NodeToMasterPacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.NodeToMasterPacket)
}
NodeToMasterPacket::NodeToMasterPacket(const NodeToMasterPacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	if (from._internal_has_server_info()) {
		server_info_ = new ::NFNetProto::ServerInfoReport(*from.server_info_);
	}
	else {
		server_info_ = nullptr;
	}
	// @@protoc_insertion_point(copy_constructor:NFNetProto.NodeToMasterPacket)
}

void NodeToMasterPacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeToMasterPacket_NFNodeNet_2eproto.base);
	server_info_ = nullptr;
}

NodeToMasterPacket::~NodeToMasterPacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.NodeToMasterPacket)
	SharedDtor();
}

void NodeToMasterPacket::SharedDtor() {
	if (this != internal_default_instance()) delete server_info_;
}

void NodeToMasterPacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const NodeToMasterPacket& NodeToMasterPacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeToMasterPacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void NodeToMasterPacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.NodeToMasterPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	if (GetArenaNoVirtual() == nullptr && server_info_ != nullptr) {
		delete server_info_;
	}
	server_info_ = nullptr;
	_internal_metadata_.Clear();
}

const char* NodeToMasterPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .NFNetProto.ServerInfoReport server_info = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
				ptr = ctx->ParseMessage(_internal_mutable_server_info(), ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeToMasterPacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.NodeToMasterPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .NFNetProto.ServerInfoReport server_info = 1;
	if (this->has_server_info()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
			InternalWriteMessageToArray(
				1, _Internal::server_info(this), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.NodeToMasterPacket)
	return target;
}

size_t NodeToMasterPacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.NodeToMasterPacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// .NFNetProto.ServerInfoReport server_info = 1;
	if (this->has_server_info()) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
				*server_info_);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void NodeToMasterPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.NodeToMasterPacket)
	GOOGLE_DCHECK_NE(&from, this);
	const NodeToMasterPacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeToMasterPacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.NodeToMasterPacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.NodeToMasterPacket)
		MergeFrom(*source);
	}
}

void NodeToMasterPacket::MergeFrom(const NodeToMasterPacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.NodeToMasterPacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.has_server_info()) {
		_internal_mutable_server_info()->::NFNetProto::ServerInfoReport::MergeFrom(from._internal_server_info());
	}
}

void NodeToMasterPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.NodeToMasterPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void NodeToMasterPacket::CopyFrom(const NodeToMasterPacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.NodeToMasterPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool NodeToMasterPacket::IsInitialized() const {
	return true;
}

void NodeToMasterPacket::InternalSwap(NodeToMasterPacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	swap(server_info_, other->server_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeToMasterPacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void MasterToNodePacket::InitAsDefaultInstance() {
}
class MasterToNodePacket::_Internal {
public:
};

MasterToNodePacket::MasterToNodePacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.MasterToNodePacket)
}
MasterToNodePacket::MasterToNodePacket(const MasterToNodePacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	result_ = from.result_;
	// @@protoc_insertion_point(copy_constructor:NFNetProto.MasterToNodePacket)
}

void MasterToNodePacket::SharedCtor() {
	result_ = 0;
}

MasterToNodePacket::~MasterToNodePacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.MasterToNodePacket)
	SharedDtor();
}

void MasterToNodePacket::SharedDtor() {
}

void MasterToNodePacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const MasterToNodePacket& MasterToNodePacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MasterToNodePacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void MasterToNodePacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.MasterToNodePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	result_ = 0;
	_internal_metadata_.Clear();
}

const char* MasterToNodePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .NFNetProto.RegResult result = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
				_internal_set_result(static_cast<::NFNetProto::RegResult>(val));
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MasterToNodePacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.MasterToNodePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .NFNetProto.RegResult result = 1;
	if (this->result() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
			1, this->_internal_result(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.MasterToNodePacket)
	return target;
}

size_t MasterToNodePacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.MasterToNodePacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// .NFNetProto.RegResult result = 1;
	if (this->result() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void MasterToNodePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.MasterToNodePacket)
	GOOGLE_DCHECK_NE(&from, this);
	const MasterToNodePacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MasterToNodePacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.MasterToNodePacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.MasterToNodePacket)
		MergeFrom(*source);
	}
}

void MasterToNodePacket::MergeFrom(const MasterToNodePacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.MasterToNodePacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.result() != 0) {
		_internal_set_result(from._internal_result());
	}
}

void MasterToNodePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.MasterToNodePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void MasterToNodePacket::CopyFrom(const MasterToNodePacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.MasterToNodePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool MasterToNodePacket::IsInitialized() const {
	return true;
}

void MasterToNodePacket::InternalSwap(MasterToNodePacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterToNodePacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void GateToLoginPacket::InitAsDefaultInstance() {
}
class GateToLoginPacket::_Internal {
public:
};

GateToLoginPacket::GateToLoginPacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.GateToLoginPacket)
}
GateToLoginPacket::GateToLoginPacket(const GateToLoginPacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.GateToLoginPacket)
}

void GateToLoginPacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GateToLoginPacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GateToLoginPacket::~GateToLoginPacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.GateToLoginPacket)
	SharedDtor();
}

void GateToLoginPacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GateToLoginPacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const GateToLoginPacket& GateToLoginPacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GateToLoginPacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void GateToLoginPacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.GateToLoginPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* GateToLoginPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GateToLoginPacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.GateToLoginPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.GateToLoginPacket)
	return target;
}

size_t GateToLoginPacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.GateToLoginPacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void GateToLoginPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.GateToLoginPacket)
	GOOGLE_DCHECK_NE(&from, this);
	const GateToLoginPacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GateToLoginPacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.GateToLoginPacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.GateToLoginPacket)
		MergeFrom(*source);
	}
}

void GateToLoginPacket::MergeFrom(const GateToLoginPacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.GateToLoginPacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void GateToLoginPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.GateToLoginPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void GateToLoginPacket::CopyFrom(const GateToLoginPacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.GateToLoginPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool GateToLoginPacket::IsInitialized() const {
	return true;
}

void GateToLoginPacket::InternalSwap(GateToLoginPacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GateToLoginPacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void LoginToGatePacket::InitAsDefaultInstance() {
}
class LoginToGatePacket::_Internal {
public:
};

LoginToGatePacket::LoginToGatePacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.LoginToGatePacket)
}
LoginToGatePacket::LoginToGatePacket(const LoginToGatePacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.LoginToGatePacket)
}

void LoginToGatePacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginToGatePacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

LoginToGatePacket::~LoginToGatePacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.LoginToGatePacket)
	SharedDtor();
}

void LoginToGatePacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginToGatePacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const LoginToGatePacket& LoginToGatePacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginToGatePacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void LoginToGatePacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.LoginToGatePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* LoginToGatePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginToGatePacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.LoginToGatePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.LoginToGatePacket)
	return target;
}

size_t LoginToGatePacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.LoginToGatePacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void LoginToGatePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.LoginToGatePacket)
	GOOGLE_DCHECK_NE(&from, this);
	const LoginToGatePacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginToGatePacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.LoginToGatePacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.LoginToGatePacket)
		MergeFrom(*source);
	}
}

void LoginToGatePacket::MergeFrom(const LoginToGatePacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.LoginToGatePacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void LoginToGatePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.LoginToGatePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void LoginToGatePacket::CopyFrom(const LoginToGatePacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.LoginToGatePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool LoginToGatePacket::IsInitialized() const {
	return true;
}

void LoginToGatePacket::InternalSwap(LoginToGatePacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginToGatePacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void GateToGamePacket::InitAsDefaultInstance() {
}
class GateToGamePacket::_Internal {
public:
};

GateToGamePacket::GateToGamePacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.GateToGamePacket)
}
GateToGamePacket::GateToGamePacket(const GateToGamePacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.GateToGamePacket)
}

void GateToGamePacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GateToGamePacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GateToGamePacket::~GateToGamePacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.GateToGamePacket)
	SharedDtor();
}

void GateToGamePacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GateToGamePacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const GateToGamePacket& GateToGamePacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GateToGamePacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void GateToGamePacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.GateToGamePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* GateToGamePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GateToGamePacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.GateToGamePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.GateToGamePacket)
	return target;
}

size_t GateToGamePacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.GateToGamePacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void GateToGamePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.GateToGamePacket)
	GOOGLE_DCHECK_NE(&from, this);
	const GateToGamePacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GateToGamePacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.GateToGamePacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.GateToGamePacket)
		MergeFrom(*source);
	}
}

void GateToGamePacket::MergeFrom(const GateToGamePacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.GateToGamePacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void GateToGamePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.GateToGamePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void GateToGamePacket::CopyFrom(const GateToGamePacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.GateToGamePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool GateToGamePacket::IsInitialized() const {
	return true;
}

void GateToGamePacket::InternalSwap(GateToGamePacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GateToGamePacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void GameToGatePacket::InitAsDefaultInstance() {
}
class GameToGatePacket::_Internal {
public:
};

GameToGatePacket::GameToGatePacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.GameToGatePacket)
}
GameToGatePacket::GameToGatePacket(const GameToGatePacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.GameToGatePacket)
}

void GameToGatePacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameToGatePacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GameToGatePacket::~GameToGatePacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.GameToGatePacket)
	SharedDtor();
}

void GameToGatePacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameToGatePacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const GameToGatePacket& GameToGatePacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameToGatePacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void GameToGatePacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.GameToGatePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* GameToGatePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameToGatePacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.GameToGatePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.GameToGatePacket)
	return target;
}

size_t GameToGatePacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.GameToGatePacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void GameToGatePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.GameToGatePacket)
	GOOGLE_DCHECK_NE(&from, this);
	const GameToGatePacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameToGatePacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.GameToGatePacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.GameToGatePacket)
		MergeFrom(*source);
	}
}

void GameToGatePacket::MergeFrom(const GameToGatePacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.GameToGatePacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void GameToGatePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.GameToGatePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void GameToGatePacket::CopyFrom(const GameToGatePacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.GameToGatePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool GameToGatePacket::IsInitialized() const {
	return true;
}

void GameToGatePacket::InternalSwap(GameToGatePacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameToGatePacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void GateToChatPacket::InitAsDefaultInstance() {
}
class GateToChatPacket::_Internal {
public:
};

GateToChatPacket::GateToChatPacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.GateToChatPacket)
}
GateToChatPacket::GateToChatPacket(const GateToChatPacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.GateToChatPacket)
}

void GateToChatPacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GateToChatPacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GateToChatPacket::~GateToChatPacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.GateToChatPacket)
	SharedDtor();
}

void GateToChatPacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GateToChatPacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const GateToChatPacket& GateToChatPacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GateToChatPacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void GateToChatPacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.GateToChatPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* GateToChatPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GateToChatPacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.GateToChatPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.GateToChatPacket)
	return target;
}

size_t GateToChatPacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.GateToChatPacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void GateToChatPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.GateToChatPacket)
	GOOGLE_DCHECK_NE(&from, this);
	const GateToChatPacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GateToChatPacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.GateToChatPacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.GateToChatPacket)
		MergeFrom(*source);
	}
}

void GateToChatPacket::MergeFrom(const GateToChatPacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.GateToChatPacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void GateToChatPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.GateToChatPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void GateToChatPacket::CopyFrom(const GateToChatPacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.GateToChatPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool GateToChatPacket::IsInitialized() const {
	return true;
}

void GateToChatPacket::InternalSwap(GateToChatPacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GateToChatPacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void ChatToGatePacket::InitAsDefaultInstance() {
}
class ChatToGatePacket::_Internal {
public:
};

ChatToGatePacket::ChatToGatePacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.ChatToGatePacket)
}
ChatToGatePacket::ChatToGatePacket(const ChatToGatePacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.ChatToGatePacket)
}

void ChatToGatePacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatToGatePacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

ChatToGatePacket::~ChatToGatePacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.ChatToGatePacket)
	SharedDtor();
}

void ChatToGatePacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatToGatePacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const ChatToGatePacket& ChatToGatePacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatToGatePacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void ChatToGatePacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.ChatToGatePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* ChatToGatePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatToGatePacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.ChatToGatePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.ChatToGatePacket)
	return target;
}

size_t ChatToGatePacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.ChatToGatePacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void ChatToGatePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.ChatToGatePacket)
	GOOGLE_DCHECK_NE(&from, this);
	const ChatToGatePacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatToGatePacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.ChatToGatePacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.ChatToGatePacket)
		MergeFrom(*source);
	}
}

void ChatToGatePacket::MergeFrom(const ChatToGatePacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.ChatToGatePacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void ChatToGatePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.ChatToGatePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void ChatToGatePacket::CopyFrom(const ChatToGatePacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.ChatToGatePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool ChatToGatePacket::IsInitialized() const {
	return true;
}

void ChatToGatePacket::InternalSwap(ChatToGatePacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatToGatePacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void WorldToGatePacket::InitAsDefaultInstance() {
}
class WorldToGatePacket::_Internal {
public:
};

WorldToGatePacket::WorldToGatePacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.WorldToGatePacket)
}
WorldToGatePacket::WorldToGatePacket(const WorldToGatePacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.WorldToGatePacket)
}

void WorldToGatePacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldToGatePacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

WorldToGatePacket::~WorldToGatePacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.WorldToGatePacket)
	SharedDtor();
}

void WorldToGatePacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorldToGatePacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const WorldToGatePacket& WorldToGatePacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldToGatePacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void WorldToGatePacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.WorldToGatePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* WorldToGatePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldToGatePacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.WorldToGatePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.WorldToGatePacket)
	return target;
}

size_t WorldToGatePacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.WorldToGatePacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void WorldToGatePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.WorldToGatePacket)
	GOOGLE_DCHECK_NE(&from, this);
	const WorldToGatePacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldToGatePacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.WorldToGatePacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.WorldToGatePacket)
		MergeFrom(*source);
	}
}

void WorldToGatePacket::MergeFrom(const WorldToGatePacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.WorldToGatePacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void WorldToGatePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.WorldToGatePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void WorldToGatePacket::CopyFrom(const WorldToGatePacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.WorldToGatePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool WorldToGatePacket::IsInitialized() const {
	return true;
}

void WorldToGatePacket::InternalSwap(WorldToGatePacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldToGatePacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void GateToWorldPacket::InitAsDefaultInstance() {
}
class GateToWorldPacket::_Internal {
public:
};

GateToWorldPacket::GateToWorldPacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.GateToWorldPacket)
}
GateToWorldPacket::GateToWorldPacket(const GateToWorldPacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.GateToWorldPacket)
}

void GateToWorldPacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GateToWorldPacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GateToWorldPacket::~GateToWorldPacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.GateToWorldPacket)
	SharedDtor();
}

void GateToWorldPacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GateToWorldPacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const GateToWorldPacket& GateToWorldPacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GateToWorldPacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void GateToWorldPacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.GateToWorldPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* GateToWorldPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GateToWorldPacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.GateToWorldPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.GateToWorldPacket)
	return target;
}

size_t GateToWorldPacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.GateToWorldPacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void GateToWorldPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.GateToWorldPacket)
	GOOGLE_DCHECK_NE(&from, this);
	const GateToWorldPacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GateToWorldPacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.GateToWorldPacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.GateToWorldPacket)
		MergeFrom(*source);
	}
}

void GateToWorldPacket::MergeFrom(const GateToWorldPacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.GateToWorldPacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void GateToWorldPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.GateToWorldPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void GateToWorldPacket::CopyFrom(const GateToWorldPacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.GateToWorldPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool GateToWorldPacket::IsInitialized() const {
	return true;
}

void GateToWorldPacket::InternalSwap(GateToWorldPacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GateToWorldPacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void GameToChatPacket::InitAsDefaultInstance() {
}
class GameToChatPacket::_Internal {
public:
};

GameToChatPacket::GameToChatPacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.GameToChatPacket)
}
GameToChatPacket::GameToChatPacket(const GameToChatPacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.GameToChatPacket)
}

void GameToChatPacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameToChatPacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GameToChatPacket::~GameToChatPacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.GameToChatPacket)
	SharedDtor();
}

void GameToChatPacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameToChatPacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const GameToChatPacket& GameToChatPacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameToChatPacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void GameToChatPacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.GameToChatPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* GameToChatPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameToChatPacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.GameToChatPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.GameToChatPacket)
	return target;
}

size_t GameToChatPacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.GameToChatPacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void GameToChatPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.GameToChatPacket)
	GOOGLE_DCHECK_NE(&from, this);
	const GameToChatPacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameToChatPacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.GameToChatPacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.GameToChatPacket)
		MergeFrom(*source);
	}
}

void GameToChatPacket::MergeFrom(const GameToChatPacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.GameToChatPacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void GameToChatPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.GameToChatPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void GameToChatPacket::CopyFrom(const GameToChatPacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.GameToChatPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool GameToChatPacket::IsInitialized() const {
	return true;
}

void GameToChatPacket::InternalSwap(GameToChatPacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameToChatPacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void ChatToGamePacket::InitAsDefaultInstance() {
}
class ChatToGamePacket::_Internal {
public:
};

ChatToGamePacket::ChatToGamePacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.ChatToGamePacket)
}
ChatToGamePacket::ChatToGamePacket(const ChatToGamePacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.ChatToGamePacket)
}

void ChatToGamePacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatToGamePacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

ChatToGamePacket::~ChatToGamePacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.ChatToGamePacket)
	SharedDtor();
}

void ChatToGamePacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatToGamePacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const ChatToGamePacket& ChatToGamePacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatToGamePacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void ChatToGamePacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.ChatToGamePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* ChatToGamePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatToGamePacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.ChatToGamePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.ChatToGamePacket)
	return target;
}

size_t ChatToGamePacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.ChatToGamePacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void ChatToGamePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.ChatToGamePacket)
	GOOGLE_DCHECK_NE(&from, this);
	const ChatToGamePacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatToGamePacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.ChatToGamePacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.ChatToGamePacket)
		MergeFrom(*source);
	}
}

void ChatToGamePacket::MergeFrom(const ChatToGamePacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.ChatToGamePacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void ChatToGamePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.ChatToGamePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void ChatToGamePacket::CopyFrom(const ChatToGamePacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.ChatToGamePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool ChatToGamePacket::IsInitialized() const {
	return true;
}

void ChatToGamePacket::InternalSwap(ChatToGamePacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatToGamePacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void GameToWorldPacket::InitAsDefaultInstance() {
}
class GameToWorldPacket::_Internal {
public:
};

GameToWorldPacket::GameToWorldPacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.GameToWorldPacket)
}
GameToWorldPacket::GameToWorldPacket(const GameToWorldPacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.GameToWorldPacket)
}

void GameToWorldPacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameToWorldPacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

GameToWorldPacket::~GameToWorldPacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.GameToWorldPacket)
	SharedDtor();
}

void GameToWorldPacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameToWorldPacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const GameToWorldPacket& GameToWorldPacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameToWorldPacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void GameToWorldPacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.GameToWorldPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* GameToWorldPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameToWorldPacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.GameToWorldPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.GameToWorldPacket)
	return target;
}

size_t GameToWorldPacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.GameToWorldPacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void GameToWorldPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.GameToWorldPacket)
	GOOGLE_DCHECK_NE(&from, this);
	const GameToWorldPacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameToWorldPacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.GameToWorldPacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.GameToWorldPacket)
		MergeFrom(*source);
	}
}

void GameToWorldPacket::MergeFrom(const GameToWorldPacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.GameToWorldPacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void GameToWorldPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.GameToWorldPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void GameToWorldPacket::CopyFrom(const GameToWorldPacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.GameToWorldPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool GameToWorldPacket::IsInitialized() const {
	return true;
}

void GameToWorldPacket::InternalSwap(GameToWorldPacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameToWorldPacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void WorldToGamePacket::InitAsDefaultInstance() {
}
class WorldToGamePacket::_Internal {
public:
};

WorldToGamePacket::WorldToGamePacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.WorldToGamePacket)
}
WorldToGamePacket::WorldToGamePacket(const WorldToGamePacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.WorldToGamePacket)
}

void WorldToGamePacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldToGamePacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

WorldToGamePacket::~WorldToGamePacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.WorldToGamePacket)
	SharedDtor();
}

void WorldToGamePacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorldToGamePacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const WorldToGamePacket& WorldToGamePacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldToGamePacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void WorldToGamePacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.WorldToGamePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* WorldToGamePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldToGamePacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.WorldToGamePacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.WorldToGamePacket)
	return target;
}

size_t WorldToGamePacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.WorldToGamePacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void WorldToGamePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.WorldToGamePacket)
	GOOGLE_DCHECK_NE(&from, this);
	const WorldToGamePacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldToGamePacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.WorldToGamePacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.WorldToGamePacket)
		MergeFrom(*source);
	}
}

void WorldToGamePacket::MergeFrom(const WorldToGamePacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.WorldToGamePacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void WorldToGamePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.WorldToGamePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void WorldToGamePacket::CopyFrom(const WorldToGamePacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.WorldToGamePacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool WorldToGamePacket::IsInitialized() const {
	return true;
}

void WorldToGamePacket::InternalSwap(WorldToGamePacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldToGamePacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void LoginToWorldPacket::InitAsDefaultInstance() {
}
class LoginToWorldPacket::_Internal {
public:
};

LoginToWorldPacket::LoginToWorldPacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.LoginToWorldPacket)
}
LoginToWorldPacket::LoginToWorldPacket(const LoginToWorldPacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.LoginToWorldPacket)
}

void LoginToWorldPacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginToWorldPacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

LoginToWorldPacket::~LoginToWorldPacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.LoginToWorldPacket)
	SharedDtor();
}

void LoginToWorldPacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginToWorldPacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const LoginToWorldPacket& LoginToWorldPacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginToWorldPacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void LoginToWorldPacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.LoginToWorldPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* LoginToWorldPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginToWorldPacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.LoginToWorldPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.LoginToWorldPacket)
	return target;
}

size_t LoginToWorldPacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.LoginToWorldPacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void LoginToWorldPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.LoginToWorldPacket)
	GOOGLE_DCHECK_NE(&from, this);
	const LoginToWorldPacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginToWorldPacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.LoginToWorldPacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.LoginToWorldPacket)
		MergeFrom(*source);
	}
}

void LoginToWorldPacket::MergeFrom(const LoginToWorldPacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.LoginToWorldPacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void LoginToWorldPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.LoginToWorldPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void LoginToWorldPacket::CopyFrom(const LoginToWorldPacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.LoginToWorldPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool LoginToWorldPacket::IsInitialized() const {
	return true;
}

void LoginToWorldPacket::InternalSwap(LoginToWorldPacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginToWorldPacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void WorldToLoginPacket::InitAsDefaultInstance() {
}
class WorldToLoginPacket::_Internal {
public:
};

WorldToLoginPacket::WorldToLoginPacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.WorldToLoginPacket)
}
WorldToLoginPacket::WorldToLoginPacket(const WorldToLoginPacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.WorldToLoginPacket)
}

void WorldToLoginPacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldToLoginPacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

WorldToLoginPacket::~WorldToLoginPacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.WorldToLoginPacket)
	SharedDtor();
}

void WorldToLoginPacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorldToLoginPacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const WorldToLoginPacket& WorldToLoginPacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldToLoginPacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void WorldToLoginPacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.WorldToLoginPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* WorldToLoginPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldToLoginPacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.WorldToLoginPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.WorldToLoginPacket)
	return target;
}

size_t WorldToLoginPacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.WorldToLoginPacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void WorldToLoginPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.WorldToLoginPacket)
	GOOGLE_DCHECK_NE(&from, this);
	const WorldToLoginPacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldToLoginPacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.WorldToLoginPacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.WorldToLoginPacket)
		MergeFrom(*source);
	}
}

void WorldToLoginPacket::MergeFrom(const WorldToLoginPacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.WorldToLoginPacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void WorldToLoginPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.WorldToLoginPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void WorldToLoginPacket::CopyFrom(const WorldToLoginPacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.WorldToLoginPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool WorldToLoginPacket::IsInitialized() const {
	return true;
}

void WorldToLoginPacket::InternalSwap(WorldToLoginPacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldToLoginPacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void WorldToDBPacket::InitAsDefaultInstance() {
}
class WorldToDBPacket::_Internal {
public:
};

WorldToDBPacket::WorldToDBPacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.WorldToDBPacket)
}
WorldToDBPacket::WorldToDBPacket(const WorldToDBPacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.WorldToDBPacket)
}

void WorldToDBPacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldToDBPacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

WorldToDBPacket::~WorldToDBPacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.WorldToDBPacket)
	SharedDtor();
}

void WorldToDBPacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorldToDBPacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const WorldToDBPacket& WorldToDBPacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldToDBPacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void WorldToDBPacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.WorldToDBPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* WorldToDBPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
				ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
		default: {
		handle_unusual:
			if ((tag & 7) == 4 || tag == 0) {
				ctx->SetLastTag(tag);
				goto success;
			}
			ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
			CHK_(ptr != nullptr);
			continue;
		}
		}  // switch
	}  // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldToDBPacket::InternalSerializeWithCachedSizesToArray(
	::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:NFNetProto.WorldToDBPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
	}

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
			3, this->_internal_msg_body(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
			_internal_metadata_.unknown_fields(), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:NFNetProto.WorldToDBPacket)
	return target;
}

size_t WorldToDBPacket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:NFNetProto.WorldToDBPacket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// bytes msg_body = 3;
	if (this->msg_body().size() > 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
				this->_internal_msg_body());
	}

	// uint64 player_id = 1;
	if (this->player_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
				this->_internal_player_id());
	}

	// uint32 msg_id = 2;
	if (this->msg_id() != 0) {
		total_size += 1 +
			::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
				this->_internal_msg_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
			_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void WorldToDBPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.WorldToDBPacket)
	GOOGLE_DCHECK_NE(&from, this);
	const WorldToDBPacket* source =
		::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldToDBPacket>(
			&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.WorldToDBPacket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	}
	else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.WorldToDBPacket)
		MergeFrom(*source);
	}
}

void WorldToDBPacket::MergeFrom(const WorldToDBPacket& from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.WorldToDBPacket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg_body().size() > 0) {

		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	if (from.player_id() != 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.msg_id() != 0) {
		_internal_set_msg_id(from._internal_msg_id());
	}
}

void WorldToDBPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
	// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.WorldToDBPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

void WorldToDBPacket::CopyFrom(const WorldToDBPacket& from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.WorldToDBPacket)
	if (&from == this) return;
	Clear();
	MergeFrom(from);
}

bool WorldToDBPacket::IsInitialized() const {
	return true;
}

void WorldToDBPacket::InternalSwap(WorldToDBPacket* other) {
	using std::swap;
	_internal_metadata_.Swap(&other->_internal_metadata_);
	msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
		GetArenaNoVirtual());
	swap(player_id_, other->player_id_);
	swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldToDBPacket::GetMetadata() const {
	return GetMetadataStatic();
}


// ===================================================================

void DBToWorldPacket::InitAsDefaultInstance() {
}
class DBToWorldPacket::_Internal {
public:
};

DBToWorldPacket::DBToWorldPacket()
	: ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
	SharedCtor();
	// @@protoc_insertion_point(constructor:NFNetProto.DBToWorldPacket)
}
DBToWorldPacket::DBToWorldPacket(const DBToWorldPacket& from)
	: ::PROTOBUF_NAMESPACE_ID::Message(),
	_internal_metadata_(nullptr) {
	_internal_metadata_.MergeFrom(from._internal_metadata_);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg_body().empty()) {
		msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
	}
	::memcpy(&player_id_, &from.player_id_,
		static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
			reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	// @@protoc_insertion_point(copy_constructor:NFNetProto.DBToWorldPacket)
}

void DBToWorldPacket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBToWorldPacket_NFNodeNet_2eproto.base);
	msg_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
}

DBToWorldPacket::~DBToWorldPacket() {
	// @@protoc_insertion_point(destructor:NFNetProto.DBToWorldPacket)
	SharedDtor();
}

void DBToWorldPacket::SharedDtor() {
	msg_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBToWorldPacket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const DBToWorldPacket& DBToWorldPacket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBToWorldPacket_NFNodeNet_2eproto.base);
	return *internal_default_instance();
}


void DBToWorldPacket::Clear() {
	// @@protoc_insertion_point(message_clear_start:NFNetProto.DBToWorldPacket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(&player_id_, 0, static_cast<size_t>(
		reinterpret_cast<char*>(&msg_id_) -
		reinterpret_cast<char*>(&player_id_)) + sizeof(msg_id_));
	_internal_metadata_.Clear();
}

const char* DBToWorldPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// uint64 player_id = 1;
		case 1:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
				player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// uint32 msg_id = 2;
		case 2:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
				msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
				CHK_(ptr);
			}
			else goto handle_unusual;
			continue;
			// bytes msg_body = 3;
		case 3:
			if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_body(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBToWorldPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFNetProto.DBToWorldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_id(), target);
  }

  // uint32 msg_id = 2;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_id(), target);
  }

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFNetProto.DBToWorldPacket)
  return target;
}

size_t DBToWorldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFNetProto.DBToWorldPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_body = 3;
  if (this->msg_body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_body());
  }

  // uint64 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_player_id());
  }

  // uint32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBToWorldPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFNetProto.DBToWorldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const DBToWorldPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBToWorldPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFNetProto.DBToWorldPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFNetProto.DBToWorldPacket)
    MergeFrom(*source);
  }
}

void DBToWorldPacket::MergeFrom(const DBToWorldPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFNetProto.DBToWorldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_body().size() > 0) {

    msg_body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_body_);
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void DBToWorldPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFNetProto.DBToWorldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBToWorldPacket::CopyFrom(const DBToWorldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFNetProto.DBToWorldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBToWorldPacket::IsInitialized() const {
  return true;
}

void DBToWorldPacket::InternalSwap(DBToWorldPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_body_.Swap(&other->msg_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBToWorldPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFNetProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NFNetProto::Ident* Arena::CreateMaybeMessage< ::NFNetProto::Ident >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::Ident >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::ServerInfoReport* Arena::CreateMaybeMessage< ::NFNetProto::ServerInfoReport >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::ServerInfoReport >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::ServerInfoReportList* Arena::CreateMaybeMessage< ::NFNetProto::ServerInfoReportList >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::ServerInfoReportList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::ServerInfo* Arena::CreateMaybeMessage< ::NFNetProto::ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::MsgBase* Arena::CreateMaybeMessage< ::NFNetProto::MsgBase >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::MsgBase >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::ServerHeartBeat* Arena::CreateMaybeMessage< ::NFNetProto::ServerHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::ServerHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::NodeToMasterPacket* Arena::CreateMaybeMessage< ::NFNetProto::NodeToMasterPacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::NodeToMasterPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::MasterToNodePacket* Arena::CreateMaybeMessage< ::NFNetProto::MasterToNodePacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::MasterToNodePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::GateToLoginPacket* Arena::CreateMaybeMessage< ::NFNetProto::GateToLoginPacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::GateToLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::LoginToGatePacket* Arena::CreateMaybeMessage< ::NFNetProto::LoginToGatePacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::LoginToGatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::GateToGamePacket* Arena::CreateMaybeMessage< ::NFNetProto::GateToGamePacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::GateToGamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::GameToGatePacket* Arena::CreateMaybeMessage< ::NFNetProto::GameToGatePacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::GameToGatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::GateToChatPacket* Arena::CreateMaybeMessage< ::NFNetProto::GateToChatPacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::GateToChatPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::ChatToGatePacket* Arena::CreateMaybeMessage< ::NFNetProto::ChatToGatePacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::ChatToGatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::WorldToGatePacket* Arena::CreateMaybeMessage< ::NFNetProto::WorldToGatePacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::WorldToGatePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::GateToWorldPacket* Arena::CreateMaybeMessage< ::NFNetProto::GateToWorldPacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::GateToWorldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::GameToChatPacket* Arena::CreateMaybeMessage< ::NFNetProto::GameToChatPacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::GameToChatPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::ChatToGamePacket* Arena::CreateMaybeMessage< ::NFNetProto::ChatToGamePacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::ChatToGamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::GameToWorldPacket* Arena::CreateMaybeMessage< ::NFNetProto::GameToWorldPacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::GameToWorldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::WorldToGamePacket* Arena::CreateMaybeMessage< ::NFNetProto::WorldToGamePacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::WorldToGamePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::LoginToWorldPacket* Arena::CreateMaybeMessage< ::NFNetProto::LoginToWorldPacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::LoginToWorldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::WorldToLoginPacket* Arena::CreateMaybeMessage< ::NFNetProto::WorldToLoginPacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::WorldToLoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::WorldToDBPacket* Arena::CreateMaybeMessage< ::NFNetProto::WorldToDBPacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::WorldToDBPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::NFNetProto::DBToWorldPacket* Arena::CreateMaybeMessage< ::NFNetProto::DBToWorldPacket >(Arena* arena) {
  return Arena::CreateInternal< ::NFNetProto::DBToWorldPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
