syntax = "proto3";

import "ServerPublic.proto";
package NFNetProto; 

message Ident//The base protocol can not be transfer directly
{ 
    int64	svrid = 1;
    int64	index = 2;
}

enum EServerState
{
	EST_CRASH = 0;
	EST_NORMAL = 1;
	EST_BUSY = 2;
	EST_FIRE = 3;
	EST_MAINTEN = 4;
}

message ServerInfoReport
{
	
	int32	server_id = 1;
	bytes	server_name = 2;
	bytes	server_ip = 3;
	int32	server_port = 4;
	int32	server_max_online = 5;
	int32	server_cur_count = 6;
	EServerState	server_state = 7;
	int32	server_type = 8;
}

message ServerInfoReportList
{
	repeated ServerInfoReport	server_list = 1;
}

message ServerInfo
{
    int32	server_id = 1;
    bytes	name = 2;
	int32	wait_count = 3;
	EServerState	status = 4;
}

message MsgBase
{
	Ident	player_id = 1;//only be used between proxy-server and game-server
	bytes	msg_data = 2;
	repeated Ident	player_Client_list = 3;
	Ident	hash_ident = 4;
}

message ServerHeartBeat
{
	int32	count = 1;
}


enum ServerNodeMsgID
{
	SERVER_NODE_MSG_ID = 0;

	GATE_ROUTE_TO_LOGIN = 10001;
	LOGIN_ROUTE_TO_GATE = 10002;

	GATE_ROUTE_TO_GAME = 10003;
	GAME_ROUTE_TO_GATE = 10004;
	
	GATE_ROUTE_TO_CHAT  = 10005;
	CHAT_ROUTE_TO_GATE = 10006;

	WORLD_ROUTE_TO_GATE = 10007;
	GATE_ROUTE_TO_WORLD = 10008;

	GAME_ROUTE_TO_CHAT = 10009;
	CHAT_ROUTE_TO_GAME = 10010;

	GAME_ROUTE_TO_WORLD = 10011;
	WORLD_ROUTE_TO_GAME = 10012;

	LOGIN_ROUTE_TO_WORLD = 10013;
	WORLD_ROUTE_TO_LOGIN = 10014;

	WORLD_ROUTE_TO_DB = 10015;
	DB_ROUTE_TO_WORLD = 10016;

	PLAYER_ROUTE_TO_GATE = 10017;
	GATE_ROUTE_TO_PLAYER = 10018;
	
	GAME_PLAYER_OFFLINE = 10051;
	REPORT_CLIENT_INFO_TO_SERVER = 10054;
	MASTER_REPORT_SERVER_INFO_TO_SERVER = 10053;
	
}

enum EServerType
{
	SERVER_TYPE_NONE = 0;
	SERVER_TYPE_MASTER = 1;
	SERVER_TYPE_GAME = 2;
	SERVER_TYPE_LOGIN = 3;
	SERVER_TYPE_WORLD = 4;
	SERVER_TYPE_GATE = 5;
	SERVER_TYPE_CHAT = 6;
	SERVER_TYPE_DB = 7;
	SERVER_TYPE_MYSQL = 8;
	SERVER_TYPE_REDIS = 9;
	SERVER_TYPE_PLAYER = 10;
	SERVER_TYPE_MAX = 11;
}

enum RegResult
{
	E_SUCCESS = 0;
	E_FAILED = 1;
}

message NodeToMasterPacket
{
	ServerInfoReport server_info = 1;
}

message MasterToNodePacket
{
	RegResult result = 1;
}

message GateToLoginPacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message LoginToGatePacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message GateToGamePacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message GameToGatePacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message GateToChatPacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message ChatToGatePacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message WorldToGatePacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message GateToWorldPacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message GameToChatPacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message ChatToGamePacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message GameToWorldPacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message WorldToGamePacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message LoginToWorldPacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message WorldToLoginPacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message WorldToDBPacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}

message DBToWorldPacket
{
	uint64 player_id = 1;
	uint32 msg_id = 2;
	bytes msg_body = 3;
}